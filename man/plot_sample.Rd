% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_sample.R
\name{plot_sample}
\alias{plot_sample}
\title{Plot how well the stimuli represent the underlying population of words given}
\usage{
plot_sample(df, include = "design", force = TRUE, id_col = "string")
}
\arguments{
\item{df}{Output from \code{generate()} or \code{long_format()}}

\item{include}{A character vector indicating which variables to include in the plot. This can be those specified by \code{split_by()} and \code{control_for()} (\code{"design"}), only those specified in \code{split_by()} (\code{"splits"}), or only those specified by \code{control_for()} (\code{"controls"}). Alternatively, this can be a character vector of the variables that should be plotted, that were in the original dataframe. Default is \code{"design"}.}

\item{force}{Logical, should the function be forced to try and work if attributes are missing (default is \code{TRUE})? If \code{TRUE}, will expect the dataframe to have a structure similar to that produced by \code{long_format()}, where \code{condition} is character or factor, and \code{item_nr} is numeric or factor. Other variables will be plot-able if given to the \code{include} argument.}

\item{id_col}{A character vector specifying the column identifying unique observations (e.g. in \code{LexOPS::lexops}, the \code{id_col} is \code{"string"}). Ignored unless \code{force=TRUE}, in which case it is required.}
}
\value{
A ggplot object showing how conditions differ in independent variables, and are matched for in controls.
}
\description{
Takes the output from \code{generate()} or \code{long_format()}, and plots distributions on numeric variables used in the generate pipeline (i.e. indepdent variables, controls), collapsed across conditions, relative to the underlying distribution. Alternatively, distributions of any specific numeric variables in the original dataframe can be queried.
}
\examples{

stim <- lexops |>
  dplyr::filter(PK.Brysbaert >= .75) |>
  split_by(BG.SUBTLEX_UK, 0.001:0.003 ~ 0.009:0.011) |>
  split_by(CNC.Brysbaert, 1:2 ~ 4:5) |>
  control_for(Zipf.SUBTLEX_UK, -0.2:0.2) |>
  control_for(Length) |>
  generate(n = 50, match_null = "balanced")
plot_sample(stim)

}
